*tangerine.txt*                           Sweet fennel integeration for neovim

==============================================================================
Table of Contents                                *tangerine-table-of-contents*

1. About                                                     |tangerine-about|
  - Features                                              |tangerine-features|
  - Comparison to other plugins        |tangerine-comparison-to-other-plugins|
2. Installation                                       |tangerine-installation|
  - Package Management                          |tangerine-package-management|
3. Setup                                                     |tangerine-setup|
4. Commands                                               |tangerine-commands|
  - Compiling                                            |tangerine-compiling|
  - Evaluation                                          |tangerine-evaluation|
  - Peeking                                                |tangerine-peeking|
  - Window                                                  |tangerine-window|
5. FAQ                                                         |tangerine-faq|
6. Api                                                         |tangerine-api|
  - Compiler Api                                      |tangerine-compiler-api|
  - Cleaning Api                                      |tangerine-cleaning-api|
  - Evaluation Api                                  |tangerine-evaluation-api|
  - Utils Api                                            |tangerine-utils-api|
  - Windows Api                                        |tangerine-windows-api|
  - Fennel Api                                          |tangerine-fennel-api|

==============================================================================
1. About                                                     *tangerine-about*

Tangerine provides a painless way to add fennel to your config.


FEATURES                                                  *tangerine-features*

- _BLAZING_ fast, compile times in milliseconds
- 100% support for interactive evaluation
- Control over when and how to compile
- Natively loads `nvim/init.fnl`


COMPARISON TO OTHER PLUGINS            *tangerine-comparison-to-other-plugins*

HOTPOT

- Abstracts too much away from the user.
- Hooks onto lua package searchers to compile [harder to debug].

ANISEED

- Excessively feature rich for use in dotfiles.
- Blindly compiles all files that it founds, resulting in slow load times.


==============================================================================
2. Installation                                       *tangerine-installation*

1. Create file `plugin/0-tangerine.lua` to bootstrap tangerine:

[!IMPORTANT] > - If you are using lazy.nvim
<https://github.com/folke/lazy.nvim> then you should create `init.lua` instead
of `plugin/0-tangerine.lua`. Refer to #20
<https://github.com/udayvir-singh/tangerine.nvim/issues/20> for more
information. > - If you are using rocks.nvim
<https://github.com/nvim-neorocks/rocks.nvim>, there is no need to bootstrap
this plugin (unless you want to write your rocks.nvim bootstrap script in
Fennel). Install with `:Rocks install tangerine.nvim` and skip to step 2.

>lua
    -- ~/.config/nvim/plugin/0-tangerine.lua or ~/.config/nvim/init.lua
    
    -- pick your plugin manager
    local pack = "tangerine" or "packer" or "paq" or "lazy"
    
    local function bootstrap(url, ref)
        local name = url:gsub(".*/", "")
        local path
    
        if pack == "lazy" then
            path = vim.fn.stdpath("data") .. "/lazy/" .. name
            vim.opt.rtp:prepend(path)
        else
            path = vim.fn.stdpath("data") .. "/site/pack/".. pack .. "/start/" .. name
        end
    
        if vim.fn.isdirectory(path) == 0 then
            print(name .. ": installing in data dir...")
    
            vim.fn.system {"git", "clone", url, path}
            if ref then
                vim.fn.system {"git", "-C", path, "checkout", ref}
            end
    
            vim.cmd "redraw"
            print(name .. ": finished installing")
        end
    end
    
    -- for stable version [recommended]
    bootstrap("https://github.com/udayvir-singh/tangerine.nvim", "v2.9")
    
    -- for git head
    bootstrap("https://github.com/udayvir-singh/tangerine.nvim")
<

1. Call tangerine `setup()` function, see |tangerine-config| for valid options:

>lua
    -- ~/.config/nvim/plugin/0-tangerine.lua
    
    require "tangerine".setup {}
<

1. Invoke `:FnlCompile` manually or add hooks in |tangerine-setup|.

Now start writing your config in `~/.config/nvim/init.fnl`.

Optionally you can also install hibiscus
<https://github.com/udayvir-singh/hibiscus.nvim> for macros.


PACKAGE MANAGEMENT                              *tangerine-package-management*

Only use a package manager if you havenâ€™t used `ref` option in bootstrap
function.

Packer

>fennel
    (local packer (require :packer))
    
    (packer.startup (lambda [use]
      (use :udayvir-singh/tangerine.nvim)))
<

Using hibiscus <https://github.com/udayvir-singh/hibiscus.nvim> macros:

>fennel
    (require-macros :hibiscus.packer)
    
    (packer-setup {}) ; bootstraps packer
    
    (packer
      (use! :udayvir-singh/tangerine.nvim))
<

Paq

>fennel
    (local paq (require :paq))
    
    (paq [
      :udayvir-singh/tangerine.nvim
    ])
<

Lazy

>fennel
    (local lazy (require :lazy))
    
    (lazy.setup [
      :udayvir-singh/tangerine.nvim
    ])
<


==============================================================================
3. Setup                                                     *tangerine-setup*


DEFAULT CONFIG ~

Tangerine comes with sane defaults so that you can get going without having to
add much to your config:

>lua
    local nvim_dir = vim.fn.stdpath [[config]]
    
    {
        vimrc   = nvim_dir .. "/init.fnl",
        source  = nvim_dir .. "/fnl",
        target  = nvim_dir .. "/lua",
        rtpdirs = {},
    
        custom = {
            -- list of custom [source target] chunks, for example:
            -- {"~/.config/awesome/fnl", "~/.config/awesome/lua"}
        },
    
        compiler = {
            float   = true,     -- show output in floating window
            clean   = true,     -- delete stale lua files
            force   = false,    -- disable diffing (not recommended)
            verbose = true,     -- enable messages showing compiled files
    
            globals = vim.tbl_keys(_G), -- list of alowed globals in fennel code
    
            -- wrapper function that provides access to underlying fennel compiler
            -- useful if you want to modify fennel API or want to provide your own fennel compiler
            adviser = function (fennel)
                -- for example, adding a custom macro path:
                -- fennel["macro-path"] = fennel["macro-path"] .. ";/custom/path/?.fnl"
                return fennel
            end,
    
            -- version of fennel to use, [ latest, 1-5-1, 1-5-0, 1-4-2, 1-4-1, 1-4-0, 1-3-1, 1-3-0, 1-2-1, 1-2-0, 1-1-0, 1-0-0 ]
            version = "latest",
    
            -- hooks for tangerine to compile on:
            -- "onsave" run every time you save fennel file in {source} dir
            -- "onload" run on VimEnter event
            -- "oninit" run before sourcing init.fnl [recommended than onload]
            hooks   = {}
        },
    
        eval = {
            float  = true,      -- show results in floating window
            luafmt = function() -- function that returns formatter with flags for peeked lua
                -- optionally install lua-format by running `$ luarocks install --local --server=https://luarocks.org/dev luaformatter`
                return {"~/.luarocks/bin/lua-format", "--column-limit", "80"}
            end,
    
            diagnostic = {
                virtual = true,  -- show errors in virtual text
                timeout = 10     -- how long should the error persist
            }
        },
    
        keymaps = {
            -- set them to <Nop> if you want to disable them
            eval_buffer = "gE",
            peek_buffer = "gL",
            goto_output = "gO",
            float = {
                next    = "<C-K>",
                prev    = "<C-J>",
                kill    = "<Esc>",
                close   = "<Enter>",
                resizef = "<C-W>=",
                resizeb = "<C-W>-"
            }
        },
    
        highlight = {
            float   = "Normal",
            success = "String",
            errors  = "DiagnosticError"
        },
    }
<


EXAMPLE CONFIG ~

Here is config that I use in my dotfiles:

>lua
    {
        -- save fnl output in a separate dir, it gets automatically added to package.path
        target = vim.fn.stdpath [[data]] .. "/tangerine",
    
        -- compile files in &rtp
        rtpdirs = {
            "plugin",
            "colors",
            "$HOME/mydir" -- absolute paths are also supported
        },
    
        compiler = {
            -- disable popup showing compiled files
            verbose = false,
    
            -- compile every time you change fennel files or on entering vim
            hooks = {"onsave", "oninit"}
        }
    }
<


==============================================================================
4. Commands                                               *tangerine-commands*


COMPILING                                                *tangerine-compiling*


:FnlCompileBuffer                                          *:FnlCompileBuffer*

Compiles current active fennel buffer.


:FnlCompile[!]                                                   *:FnlCompile*

Diff compiles all indexed fennel files.

If bang! is present then forcefully compiles all `source` files.


:FnlClean[!]                                                       *:FnlClean*

Deletes stale or orphaned lua files in `target` dir.

If bang! is present then it deletes all compiled lua files.


EVALUATION                                              *tangerine-evaluation*


:Fnl {expr}                                                             *:Fnl*

Executes and Evalutate {expr} of fennel.

>fennel
    :Fnl (print "Hello World")
      -> Hello World
    
    :Fnl (values some_var)
      -> :return [ 1 2 3 4 ]
<


:FnlFile {file}                                                     *:FnlFile*

Evaluates {file} of fennel and outputs the result.

>fennel
    :FnlFile path/source.fnl
    
    :FnlFile % ;; not recommended
<


:[range]FnlBuffer                                                 *:FnlBuffer*

Evaluates all lines or [range] in current fennel buffer.

mapped to `gE` by default.


PEEKING                                                    *tangerine-peeking*


:[range]FnlPeek                                                     *:FnlPeek*

Peek lua output for [range] in current fennel buffer.

mapped to `gL` by default.


:FnlGotoOutput                                                *:FnlGotoOutput*

Open lua output of current fennel buffer in a new buffer.

mapped to `gO` by default.


WINDOW                                                      *tangerine-window*


:FnlWinNext [N]                                                  *:FnlWinNext*

Jump to [N]th next floating window created by tangerine..

mapped to `CTRL-K` in floats by default.


:FnlWinPrev [N]                                                  *:FnlWinPrev*

Jump to [N]th previous floating window created by tangerine.

mapped to `CTRL-J` in floats by default.


:FnlWinResize [N]                                              *:FnlWinResize*

Increase or Decrease floating window height by [N] factor.

mapped to `CTRL-W =` to increase and `CTRL-W -` decrease by default.


:FnlWinClose                                                    *:FnlWinClose*

Closes current floating window under cursor.

mapped to `ENTER` in floats by default.


:FnlWinKill                                                      *:FnlWinKill*

Closes all floating windows made by tangerine.

mapped to `ESC` in floats by default.


==============================================================================
5. FAQ                                                         *tangerine-faq*

**Q: How to make tangerine compile automatically when you open vim**

**A:** add hooks in config:

>lua
    require [[tangerine]].setup {
        compiler = {
            -- if you want to compile before loading init.fnl (recommended)
            hooks = {"oninit"}
    
            -- if you want to compile after VimEnter event has fired
            hooks = {"onenter"}
        }
    }
<

**Q: How to tuck away compiled output in a separate directory**

**A:** change target in config:

>lua
    require [[tangerine]].setup {
        target = "/path/to/your/dir"
    }
<

**Q: How to make impatient work with tangerine**

**A:** bootstrap and require impatient before calling tangerine:

>lua
    bootstrap "https://github.com/lewis6991/impatient.nvim"
    
    require [[impatient]]
    
    require [[tangerine]].setup {...}
<

**Q: How to use lua files interchangeably with fennel files**

**A:** lua files can simply be stored in `fnl` dir:

>
    fnl
    â”œâ”€â”€ options.lua
    â””â”€â”€ autocmd.fnl
<

>fennel
    ; require both as normal modules in your config
    (require :options)
    (require :autocmd)
<

**Q: How to fix errors in macros while migrating from hotpot**

**A:** make sure that macro files are suffixed with `-macros.fnl`.

>
    utils
    â”œâ”€â”€ neovim-macros.fnl
    â””â”€â”€ packer-macros.fnl
<

Refer to #2 <https://github.com/udayvir-singh/tangerine.nvim/issues/2> and #30
<https://github.com/udayvir-singh/tangerine.nvim/issues/30> for more
information


==============================================================================
6. Api                                                         *tangerine-api*

By default tangerine provides the following api:

>fennel
    :Fnl tangerine.api
    
    -> :return {
         :compile {
           :all    (function 0)
           :buffer (function 1)
           :custom (function 2)
           :dir    (function 3)
           :file   (function 4)
           :rtp    (function 5)
           :string (function 6)
           :vimrc  (function 7)
         }
         :clean {
           :rtp      (function 8)
           :target   (function 9)
           :orphaned (function 10)
         }
         :eval {
           :buffer (function 11)
           :file   (function 12)
           :peek   (function 13)
           :string (function 14)
         }
         :win {
           :next    (function 15)
           :prev    (function 16)
           :close   (function 17)
           :killall (function 18)
           :resize  (function 19)
         }
         :goto_output (function 20)
         :serialize   (function 21)
       }
<


COMPILER API                                          *tangerine-compiler-api*


compile-string                                *tangerine.api.compile.string()*

(tangerine.api.compile.string {str} {opts*})

Compiles string {str} of fennel, returns string of lua.


PARAMETERS: ~

>fennel
    {
      :filename <string>
      :globals  <list>
    }
<


compile-file                                    *tangerine.api.compile.file()*

(tangerine.api.compile.file {source} {target} {opts*})

Compiles fennel {source} and writes output to {target}.


PARAMETERS: ~

>fennel
    {
      :filename <string>
      :globals  <list>
    }
<


compile-dir                                      *tangerine.api.compile.dir()*

(tangerine.api.compile.dir {source} {target} {opts*})

Diff compiles files in {source} dir and outputs to {target} dir.


PARAMETERS: ~

>fennel
    {
      :force   <boolean>
      :float   <boolean>
      :verbose <boolean>
      :globals <list>
    }
<

{opts.force} disables diffing if set to `true`


EXAMPLE: ~

>fennel
    (tangerine.api.compile.dir
      :path/fnl
      :path/lua
      {:force false :float true :verbose true})
<


compile-buffer                                *tangerine.api.compile.buffer()*

(tangerine.api.compile.buffer {opts*})

Compiles the current active fennel buffer.


PARAMETERS: ~

>fennel
    {
      :float    <boolean>
      :verbose  <boolean>
      :filename <string>
      :globals  <list>
    }
<


compile-vimrc                                  *tangerine.api.compile.vimrc()*

(tangerine.api.compile.vimrc {opts*})

Diff compiles `config.vimrc` to `config.target` dir.


PARAMETERS: ~

>fennel
    {
      :force    <boolean>
      :float    <boolean>
      :verbose  <boolean>
      :filename <string>
      :globals  <list>
    }
<

{opts.force} disables diffing if set to `true`


compile-rtp                                      *tangerine.api.compile.rtp()*

(tangerine.api.compile.rtp {opts*})

Diff compiles fennel files in `config.rtpdirs` or {opts.rtpdirs}.


PARAMETERS: ~

>fennel
    {
      :rtpdirs  <list>
      :force    <boolean>
      :float    <boolean>
      :verbose  <boolean>
      :globals  <list>
    }
<

{opts.force} disables diffing if set to `true`


EXAMPLE: ~

>fennel
    (tangerine.api.compile.rtp {
      :rtpdirs ["colors" "plugin" "$HOME/mydir"]
      :force   false
      :float   true
      :verbose true })
<


compile-custom                                *tangerine.api.compile.custom()*

(tangerine.api.compile.custom {opts*})

Diff compiles fennel files indexed in `config.custom` or {opts.custom}.


PARAMETERS: ~

>fennel
    {
      :custom   <list>
      :force    <boolean>
      :float    <boolean>
      :verbose  <boolean>
      :globals  <list>
    }
<

{opts.force} disables diffing if set to `true`


EXAMPLE: ~

>fennel
    (tangerine.api.compile.custom {
      :custom  [["~/path/fnl" "~/path/lua"]]
      :force   false
      :float   true
      :verbose true })
<


compile-all                                      *tangerine.api.compile.all()*

(tangerine.api.compile.all {opts*})

Diff compiles all indexed fennel files in `config`.


PARAMETERS: ~

>fennel
    {
      :force    <boolean>
      :float    <boolean>
      :verbose  <boolean>
      :globals  <list>
      :rtpdirs  <list>
      :custom   <list>
    }
<

{opts.force} disables diffing if set to `true`


CLEANING API                                          *tangerine-cleaning-api*

Provides functions to clean stale / orphaned lua files in target dirs.


clean-target                                    *tangerine.api.clean.target()*

(tangerine.api.clean.target {source} {target} {opts*})

Deletes orphaned? {target} after comparing against {source}.


PARAMETERS: ~

>fennel
    {
      :force <boolean>
    }
<

{opts.force} deletes {target} without comparing if set to `true`


clean-rtp                                                          *clean-rtp*

(tangerine.api.clean.rtp {opts*})

Deletes all orphaned lua files in `config.rtpdirs` or {opts.rtpdirs}.


PARAMETERS: ~

>fennel
    {
      :force    <boolean>
      :float    <boolean>
      :verbose  <boolean>
      :rtpdirs  <list>
    }
<

{opts.force} deletes all compiled files if set to `true`


clean-orphaned                                *tangerine.api.clean.orphaned()*

(tangerine.api.clean.orphaned {opts*})

Deletes all orphaned lua files indexed inside `target` dirs.


PARAMETERS: ~

>fennel
    {
      :force    <boolean>
      :float    <boolean>
      :verbose  <boolean>
      :rtpdirs  <list>
    }
<

{opts.force} deletes all compiled files if set to `true`


EVALUATION API                                      *tangerine-evaluation-api*


eval-string                                      *tangerine.api.eval.string()*

(tangerine.api.eval.string {str} {opts*})

Evaluates string {str} of fennel, pretty prints the output.


PARAMETERS: ~

>fennel
    {
      :float    <boolean>
      :virtual  <boolean>
      :filename <string>
      :offset   <number> ;; line offset for errors
    }
<


eval-file                                          *tangerine.api.eval.file()*

(tangerine.api.eval.file {path} {opts*})

Evaluates {path} of fennel, pretty prints the output.


PARAMETERS: ~

>fennel
    {
      :float    <boolean>
      :virtual  <boolean>
      :filename <string>
    }
<


eval-buffer                                      *tangerine.api.eval.buffer()*

(tangerine.api.eval.buffer {start} {end} {opts*})

Evaluates lines {start} to {end} in current fennel buffer.


PARAMETERS: ~

>fennel
    {
      :float    <boolean>
      :virtual  <boolean>
      :filename <string>
    }
<


eval-peek                                          *tangerine.api.eval.peek()*

(tangerine.api.eval.peek {start} {end} {opts*})

Peek lua output for lines {start} to {end} inside a scratch buffer.


PARAMETERS: ~

>fennel
    {
      :float    <boolean>
      :virtual  <boolean>
      :filename <string>
    }
<


UTILS API                                                *tangerine-utils-api*


goto_output                                      *tangerine.api.goto_output()*

(tangerine.api.goto_output)

Open lua source of current fennel buffer in a new buffer.


serialize                                          *tangerine.api.serialize()*

(tangerine.api.serialize {â€¦})

Returns human-readable representation of {â€¦}.


EXAMPLE: ~

>fennel
    (tangerine.api.serialize example)
    -> ":return [ 1 2 3 4 ]"
<


WINDOWS API                                            *tangerine-windows-api*

Provides functions to interact with floating windows created by tangerine.


win-next                                            *tangerine.api.win.next()*

(tangerine.api.win.next {steps*})

Switch to next floating window by 1 or N {steps*}.


win-prev                                            *tangerine.api.win.prev()*

(tangerine.api.win.prev {steps*})

Switch to previous floating window by 1 or N {steps*}.


win-resize                                        *tangerine.api.win.resize()*

(tangerine.api.win.resize {factor})

Changes height of current floating window by {factor} of N.


win-close                                          *tangerine.api.win.close()*

(tangerine.api.win.close)

Closes current floating window, switching to nearest neighbor afterwards.


win-killall                                      *tangerine.api.win.killall()*

(tangerine.api.win.killall)

Closes all floating windows created by tangerine.


FENNEL API                                              *tangerine-fennel-api*


fennel-load                                               *tangerine.fennel()*

(tangerine.fennel {version*})

Provides access to fennel compiler used by tangerine.

{version} can be one of [ `"latest"` `"1-5-1"` `"1-5-0"` `"1-4-2"` `"1-4-1"`
`"1-4-0"` `"1-3-1"` `"1-3-0"` `"1-2-1"` `"1-2-0"` `"1-1-0"` `"1-0-0"` ]

------------------------------------------------------------------------------

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
